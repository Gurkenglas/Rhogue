* Rhogue
Some stupid simple roguelike in haskell


how to deal with movement input etc. possibly not going correctly?
have a player input function like
Event -> Maybe PlayerAction


Or, Event -> Either PlayerInputError PlayerAction
or similar.

Start with Maybe.

if Nothing, loop back to the start of the player's turn.


we need to keep track of the gamestate.
assume that the map is dynamic - wands of digging or equivalent may exist.
then the map needs to be in the gamestate as well.
the player character, along with any and all NPCs
items
knowledge
quite a lot...

Start with a separate map and player, then merge them into a gamestate type.
the gamestate should be updated by some
update :: GameState -> Maybe GameState
function


collision checking - first have a function
getTile :: World -> Point -> Tile

and a
isPassable :: World -> Point -> Bool


when the player tries to move, an action should be created
Just PlayerMovement newPos
or possibly
Just PlayerMovement oldPos newPos

which should be fed into the isPassable function,

then we should have something like

validateAction :: PlayerAction -> Maybe PlayerAction
though the RHS could be of another more definite type.
Either way, if validateAction returns a
Just PlayerMovement newPos, we can be sure that the movement is legal.

then we could have a
updatePlayer :: Player -> PlayerAction -> Player

as part of the GameState update.
